import importlib
from typing import Iterator
import json
import sys
import os
import csv
from aind_data_access_api.document_db_ssh import (
    DocumentDbSSHClient,
    DocumentDbSSHCredentials,
)

DB_NAME = os.getenv("DB_NAME")
READWRITE_SECRET = os.getenv("READWRITE_SECRET")
DOCDB_SSH_TUNNEL_SECRET = os.getenv("DOCDB_SSH_TUNNEL_SECRET")

pydantic_models = {
    "modalities": "Modality",
    "organizations": "Organization",
    "species": "Species",
    "registry": "Registry"
}

enum_models = {
     "process_names": "ProcessName"
}

for mod in {**pydantic_models, **enum_models}.keys():
    importlib.import_module(f"aind_data_schema_models.{mod}")


def get_schemas(model_name: str, class_name: str) -> Iterator:
    """
    Returns Iterator of classes
    """
    module_object = sys.modules[f"aind_data_schema_models.{model_name}"]
    class_object = getattr(module_object, class_name)
    # return class_object

    for schema in class_object._ALL:
        yield schema


def get_class_object(model_name: str, class_name: str):
    """
    Returns a class object
    """
    module_object = sys.modules[f"aind_data_schema_models.{model_name}"]
    class_object = getattr(module_object, class_name)
    return class_object


credentials = DocumentDbSSHCredentials.from_secrets_manager(
      doc_db_secret_name=READWRITE_SECRET,
      ssh_secret_name=DOCDB_SSH_TUNNEL_SECRET
      )

credentials.database = DB_NAME
for models in pydantic_models:
    schemas_to_write = get_schemas(models, pydantic_models[models])
    if models == "registry":
        models = "registries"
    credentials.collection = models
    for items in schemas_to_write:
        contents = items().model_dump_json()
        json_contents = json.loads(contents)
        with DocumentDbSSHClient(credentials=credentials) as doc_db_client:
            filter = {"name": json_contents["name"]}
            response = doc_db_client.collection.update_one(filter=filter, update={"$set": json_contents}, upsert=True)
            print(response.raw_result)

for models in enum_models:
    class_object = get_class_object(models, enum_models[models])
    credentials.collection = models
    dict_to_save = {"enum": [p.value for p in class_object]}
    json_contents = json.loads(json.dumps(dict_to_save))
    with DocumentDbSSHClient(credentials=credentials) as doc_db_client:
        response = doc_db_client.collection.replace_one({}, json_contents)
        print(response.raw_result)
