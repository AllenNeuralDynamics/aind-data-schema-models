"""Mouse anatomy"""
{% raw -%}
from pydantic import BaseModel, Field, ConfigDict
from typing import Literal, Union
from typing_extensions import Annotated
from aind_data_schema_models.registries import Registry
import pandas as pd
{% endraw %}

class _MouseAnatomicalStructureModel(BaseModel):
    """Base model for mouse anatomy"""
    model_config = ConfigDict(frozen=True)
    name: str
    registry: Registry.ONE_OF
    registry_identifier: str

data = pd.read_csv('./_generators/models/mouse_anatomy.csv')

class MouseAnatomicalStructure:
    """MouseAnatomicalStructure"""

    def __init__(self):
{% for _, row in data.iterrows() %}
        self.{{ row['name'] | to_class_name | upper }} = None
{%- endfor %}

    # todo: figure how ALL and ONE_OF will work

    def __getattribute__(self, name):
        value = object.__getattribute__(self, name)

        if value is None:
            # get the data, in our case we'll use the loaded pandas file but this is not a great solution
            return _MouseAnatomicalStructureModel(
                name="temp",
                registry="temp",
                registry_identifier="temp",
            )
