"""Platforms"""
{% raw -%}
from pydantic import BaseModel, Field, ConfigDict
from typing import Literal, Union
from typing_extensions import Annotated
{% endraw %}

class BrainStructureModel(BaseModel):
    """Base model for brain strutures"""
    model_config = ConfigDict(frozen=True)
    atlas: str
    name: str
    acronym: str
    id: str

class CCFStructure:
    """CCFStructure"""
{% for _, row in data.iterrows() %}
    {{ row['acronym'] | to_class_name | upper }} = BrainStructureModel(
        atlas="CCFv3",
        name="{{ row['name'] }}",
        acronym="{{ row['acronym'] }}",
        id="{{ row['id'] }}",
    )
{%- endfor %}

    id_map = {m().id: m() for m in ALL}

    @classmethod
    def from_id(cls, id: int):
        """Get structure from id"""
        return cls.id_map.get(id, None)
