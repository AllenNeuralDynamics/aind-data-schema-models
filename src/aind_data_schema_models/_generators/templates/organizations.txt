"""Organizations"""
{% raw -%}
from pydantic import BaseModel, Field, ConfigDict
from typing import Literal, Union
from typing_extensions import Annotated
from aind_data_schema_models.registries import Registry, _RegistryModel
{% endraw %}

class _OrganizationModel(BaseModel):
    """Base model for organizations"""
    model_config = ConfigDict(frozen=True)
    name: str
    abbreviation: str
    registry: _RegistryModel
    registry_identifier: str

{% for _, row in data.iterrows() %}
class {{ row['name'] | to_class_name_underscored }}(_OrganizationModel):
    """Model {{row['name']}}"""
    name: Literal["{{ row['name'] }}"] = "{{ row['name'] }}"
    {% set abbreviation = row['abbreviation'] -%}
    abbreviation: Literal[{{ "'" + abbreviation + "'" if abbreviation == abbreviation else None }}] = {{ "'" + abbreviation + "'" if abbreviation == abbreviation else None }}
    {%- set reg_abb = row['registry_abbreviation'] %}
    {% set reg_abb_upper = reg_abb | upper -%}
    registry: _RegistryModel = {{None if reg_abb != reg_abb else "Registry." + reg_abb_upper}}
    registry_identifier: Literal["{{ row['registry_identifier'] }}"] = "{{ row['registry_identifier'] }}"

{% endfor %}
class Organization:
    """Organization"""
{% for _, row in data.iterrows() -%}
    {% set abbreviation = row['abbreviation'] %}
    {{ (abbreviation if abbreviation == abbreviation else row['name']) | to_class_name | upper }} = {{ row['name'] | to_class_name_underscored }}()
{%- endfor %}

    ALL = tuple(_OrganizationModel.__subclasses__())

    ONE_OF = Annotated[Union[tuple(_OrganizationModel.__subclasses__())], Field(discriminator="name")]

    abbreviation_map = {m().abbreviation: m() for m in ALL}

    @classmethod
    def from_abbreviation(cls, abbreviation: str):
        """Get platform from abbreviation"""
        return cls.abbreviation_map.get(abbreviation, None)

    name_map = {m().name: m() for m in ALL}

    @classmethod
    def from_name(cls, name: str):
        """Get platform from name"""
        return cls.name_map.get(name, None)

